%%%-------------------------------------------------------------------
%%% @author root
%%% @copyright (C) 2021, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 23. 3月 2021 下午6:59
%%%-------------------------------------------------------------------
-module(emqx_backend_mongo_actions).
-author("root").
-include("../include/emqx.hrl").
-export([logger_header/0]).
-include("../include/logger.hrl").
-include("../include/rule_actions.hrl").


-behaviour(ecpool_worker).

-export([connect/1]).

-export([on_resource_create_for_single/2,
  on_resource_create_for_sharded/2,
  on_resource_create_for_rs/2,
  on_get_resource_status/2,
  on_resource_destroy/2]).

-export([on_action_create_data_to_mongo/2, on_action_create_offline_msg/2, on_action_create_lookup_sub/2]).

-export([on_action_data_to_mongo/2, on_action_offline_msg_to_mongo/2,on_action_lookup_sub_to_mongo/2]).

-resource_type(#{create =>
on_resource_create_for_single,
  description =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 83, 105, 110,
    103, 108, 101, 32, 77, 111, 100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 229, 141, 149,
      232, 138, 130, 231, 130, 185, 230, 168, 161, 229,
      188, 143>>},
  destroy => on_resource_destroy,
  name => backend_mongo_single,
  params =>
  #{auth_source =>
  #{default => <<109, 113, 116, 116>>,
    description =>
    #{en =>
    <<65, 117, 116, 104, 32, 115, 111, 117,
      114, 99, 101, 32, 102, 111, 114, 32,
      99, 111, 110, 110, 101, 99, 116, 105,
      110, 103, 32, 116, 111, 32, 77, 111,
      110, 103, 111, 68, 66>>,
      zh =>
      <<231, 148, 168, 230, 136, 183, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    order => 6,
    title =>
    #{en =>
    <<65, 117, 116, 104, 32, 83, 111, 117,
      114, 99, 101>>,
      zh =>
      <<232, 191, 158, 230, 142, 165, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    type => string},
    cacertfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 67, 65, 99, 101, 114, 116, 32, 102,
        105, 108, 101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 67, 65, 232, 175, 129, 228,
          185, 166>>},
      order => 12,
      title =>
      #{en => <<83, 83, 76, 32, 67, 65>>,
        zh => <<83, 83, 76, 32, 67, 65>>},
      type => file},
    certfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 99, 101, 114, 116, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 232, 175, 129, 228, 185,
          166>>},
      order => 14,
      title =>
      #{en => <<83, 83, 76, 32, 67, 101, 114, 116>>,
        zh => <<83, 83, 76, 32, 67, 101, 114, 116>>},
      type => file},
    connectTimoutMS =>
    #{default => 20000,
      description =>
      #{en =>
      <<84, 105, 109, 101, 111, 117, 116, 32,
        102, 111, 114, 32, 99, 111, 110, 110,
        101, 99, 116, 105, 110, 103, 32, 116,
        111, 32, 115, 101, 114, 118, 101,
        114>>,
        zh => <<222, 165, 133, 246, 246, 244>>},
      order => 7,
      title =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 32,
        84, 105, 109, 101, 111, 117, 116, 40,
        109, 115, 41>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 232, 182,
          133, 230, 151, 182, 230, 151, 182, 233,
          151, 180, 40, 230, 175, 171, 231, 167,
          146, 41>>},
      type => number},
    database =>
    #{default => <<109, 113, 116, 116>>,
      description =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        110, 97, 109, 101, 32, 102, 111, 114,
        32, 115, 97, 118, 105, 110, 103, 32,
        100, 97, 116, 97>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      order => 2, required => true,
      title =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        78, 97, 109, 101>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      type => string},
    keyfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 107, 101, 121, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 231, 167, 129, 233, 146,
          165>>},
      order => 13,
      title =>
      #{en => <<83, 83, 76, 32, 75, 101, 121>>,
        zh => <<83, 83, 76, 32, 75, 101, 121>>},
      type => file},
    login =>
    #{default => <<>>,
      description =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      order => 4,
      title =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101>>,
        zh =>
        <<231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      type => string},
    password =>
    #{default => <<>>,
      description =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          229, 175, 134, 231, 160, 129>>},
      order => 5,
      title =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100>>,
        zh => <<229, 175, 134, 231, 160, 129>>},
      type => password},
    pool_size =>
    #{default => 8,
      description =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 105,
        111, 110, 32, 80, 111, 111, 108, 32,
        83, 105, 122, 101, 32, 102, 111, 114,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      order => 3, required => true,
      title =>
      #{en =>
      <<80, 111, 111, 108, 32, 83, 105, 122,
        101>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      type => number},
    servers =>
    #{default =>
    <<49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 50,
      55, 48, 49, 55>>,
      description =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114, 32, 65, 100,
        100, 114, 101, 115, 115, 44, 32, 77,
        117, 108, 116, 105, 112, 108, 101, 32,
        110, 111, 100, 101, 115, 32, 115, 101,
        112, 97, 114, 97, 116, 101, 100, 32,
        98, 121, 32, 99, 111, 109, 109, 97,
        115>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168, 229, 156, 176, 229, 157, 128, 44,
          32, 229, 164, 154, 232, 138, 130, 231,
          130, 185, 228, 189, 191, 231, 148, 168,
          233, 128, 151, 229, 143, 183, 229, 136,
          134, 233, 154, 148>>},
      order => 1, required => true,
      title =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168>>},
      type => string},
    ssl =>
    #{default => false,
      description =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76, 32, 102, 111, 114, 32, 99, 111,
        110, 110, 101, 99, 116, 105, 110, 103,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 229, 188,
          128, 229, 144, 175, 32, 83, 83, 76, 32,
          232, 191, 158, 230, 142, 165, 32, 77,
          111, 110, 103, 111, 68, 66>>},
      order => 11,
      title =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76>>,
        zh =>
        <<229, 188, 128, 229, 144, 175, 32, 83,
          83, 76>>},
      type => boolean},
    verify =>
    #{default => false,
      description =>
      #{en =>
      <<87, 104, 101, 116, 104, 101, 114, 32,
        116, 111, 32, 118, 101, 114, 105, 102,
        121, 32, 116, 104, 101, 32, 115, 101,
        114, 118, 101, 114, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 66, 121, 32, 100, 101, 102, 97,
        117, 108, 116, 44, 32, 116, 104, 101,
        32, 99, 108, 105, 101, 110, 116, 32,
        119, 105, 108, 108, 32, 110, 111, 116,
        32, 118, 101, 114, 105, 102, 121, 32,
        116, 104, 101, 32, 115, 101, 114, 118,
        101, 114, 39, 115, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 73, 102, 32, 118, 101, 114,
        105, 102, 105, 99, 97, 116, 105, 111,
        110, 32, 105, 115, 32, 114, 101, 113,
        117, 105, 114, 101, 100, 44, 32, 112,
        108, 101, 97, 115, 101, 32, 115, 101,
        116, 32, 105, 116, 32, 116, 111, 32,
        116, 114, 117, 101, 46>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166, 227, 128, 130, 32, 233,
          187, 152, 232, 174, 164, 229, 174, 162,
          230, 136, 183, 231, 171, 175, 228, 184,
          141, 228, 188, 154, 229, 142, 187, 230,
          160, 161, 233, 170, 140, 230, 156, 141,
          229, 138, 161, 229, 153, 168, 231, 154,
          132, 232, 175, 129, 228, 185, 166, 239,
          188, 140, 229, 166, 130, 230, 158, 156,
          233, 156, 128, 232, 166, 129, 230, 160,
          161, 233, 170, 140, 239, 188, 140, 232,
          175, 183, 232, 174, 190, 231, 189, 174,
          230, 136, 144, 116, 114, 117, 101, 227,
          128, 130>>},
      order => 15,
      title =>
      #{en =>
      <<86, 101, 114, 105, 102, 121, 32, 83,
        101, 114, 118, 101, 114, 32, 67, 101,
        114, 116, 102, 105, 108, 101>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166>>},
      type => boolean},
    w_mode =>
    #{default => <<115, 97, 102, 101>>,
      description =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      enum =>
      [<<115, 97, 102, 101>>,
        <<117, 110, 115, 97, 102, 101>>],
      order => 8,
      title =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      type => string}},
  status => on_get_resource_status,
  title =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 83, 105, 110,
    103, 108, 101, 32, 77, 111, 100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 229, 141, 149,
      232, 138, 130, 231, 130, 185, 230, 168, 161, 229,
      188, 143>>}}).

-resource_type(#{create =>
on_resource_create_for_sharded,
  description =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 83, 104, 97,
    114, 100, 101, 100, 32, 77, 111, 100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 83, 104, 97,
      114, 101, 100, 32, 230, 168, 161, 229, 188, 143>>},
  destroy => on_resource_destroy,
  name => backend_mongo_sharded,
  params =>
  #{auth_source =>
  #{default => <<109, 113, 116, 116>>,
    description =>
    #{en =>
    <<65, 117, 116, 104, 32, 115, 111, 117,
      114, 99, 101, 32, 102, 111, 114, 32,
      99, 111, 110, 110, 101, 99, 116, 105,
      110, 103, 32, 116, 111, 32, 77, 111,
      110, 103, 111, 68, 66>>,
      zh =>
      <<231, 148, 168, 230, 136, 183, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    order => 6,
    title =>
    #{en =>
    <<65, 117, 116, 104, 32, 83, 111, 117,
      114, 99, 101>>,
      zh =>
      <<232, 191, 158, 230, 142, 165, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    type => string},
    cacertfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 67, 65, 99, 101, 114, 116, 32, 102,
        105, 108, 101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 67, 65, 232, 175, 129, 228,
          185, 166>>},
      order => 12,
      title =>
      #{en => <<83, 83, 76, 32, 67, 65>>,
        zh => <<83, 83, 76, 32, 67, 65>>},
      type => file},
    certfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 99, 101, 114, 116, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 232, 175, 129, 228, 185,
          166>>},
      order => 14,
      title =>
      #{en => <<83, 83, 76, 32, 67, 101, 114, 116>>,
        zh => <<83, 83, 76, 32, 67, 101, 114, 116>>},
      type => file},
    connectTimoutMS =>
    #{default => 20000,
      description =>
      #{en =>
      <<84, 105, 109, 101, 111, 117, 116, 32,
        102, 111, 114, 32, 99, 111, 110, 110,
        101, 99, 116, 105, 110, 103, 32, 116,
        111, 32, 115, 101, 114, 118, 101,
        114>>,
        zh => <<222, 165, 133, 246, 246, 244>>},
      order => 7,
      title =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 32,
        84, 105, 109, 101, 111, 117, 116, 40,
        109, 115, 41>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 232, 182,
          133, 230, 151, 182, 230, 151, 182, 233,
          151, 180, 40, 230, 175, 171, 231, 167,
          146, 41>>},
      type => number},
    database =>
    #{default => <<109, 113, 116, 116>>,
      description =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        110, 97, 109, 101, 32, 102, 111, 114,
        32, 115, 97, 118, 105, 110, 103, 32,
        100, 97, 116, 97>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      order => 2, required => true,
      title =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        78, 97, 109, 101>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      type => string},
    keyfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 107, 101, 121, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 231, 167, 129, 233, 146,
          165>>},
      order => 13,
      title =>
      #{en => <<83, 83, 76, 32, 75, 101, 121>>,
        zh => <<83, 83, 76, 32, 75, 101, 121>>},
      type => file},
    login =>
    #{default => <<>>,
      description =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      order => 4,
      title =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101>>,
        zh =>
        <<231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      type => string},
    password =>
    #{default => <<>>,
      description =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          229, 175, 134, 231, 160, 129>>},
      order => 5,
      title =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100>>,
        zh => <<229, 175, 134, 231, 160, 129>>},
      type => password},
    pool_size =>
    #{default => 8,
      description =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 105,
        111, 110, 32, 80, 111, 111, 108, 32,
        83, 105, 122, 101, 32, 102, 111, 114,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      order => 3, required => true,
      title =>
      #{en =>
      <<80, 111, 111, 108, 32, 83, 105, 122,
        101>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      type => number},
    r_mode =>
    #{default => <<109, 97, 115, 116, 101, 114>>,
      description =>
      #{en =>
      <<82, 101, 97, 100, 32, 77, 111, 100,
        101>>,
        zh =>
        <<232, 175, 187, 230, 168, 161, 229, 188,
          143>>},
      enum =>
      [<<109, 97, 115, 116, 101, 114>>,
        <<115, 108, 97, 118, 101, 95, 111, 107>>],
      order => 9,
      title =>
      #{en =>
      <<82, 101, 97, 100, 32, 77, 111, 100,
        101>>,
        zh =>
        <<232, 175, 187, 230, 168, 161, 229, 188,
          143>>},
      type => string},
    servers =>
    #{default =>
    <<49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 50,
      55, 48, 49, 55>>,
      description =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114, 32, 65, 100,
        100, 114, 101, 115, 115, 44, 32, 77,
        117, 108, 116, 105, 112, 108, 101, 32,
        110, 111, 100, 101, 115, 32, 115, 101,
        112, 97, 114, 97, 116, 101, 100, 32,
        98, 121, 32, 99, 111, 109, 109, 97,
        115>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168, 229, 156, 176, 229, 157, 128, 44,
          32, 229, 164, 154, 232, 138, 130, 231,
          130, 185, 228, 189, 191, 231, 148, 168,
          233, 128, 151, 229, 143, 183, 229, 136,
          134, 233, 154, 148>>},
      order => 1, required => true,
      title =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168>>},
      type => string},
    ssl =>
    #{default => false,
      description =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76, 32, 102, 111, 114, 32, 99, 111,
        110, 110, 101, 99, 116, 105, 110, 103,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 229, 188,
          128, 229, 144, 175, 32, 83, 83, 76, 32,
          232, 191, 158, 230, 142, 165, 32, 77,
          111, 110, 103, 111, 68, 66>>},
      order => 11,
      title =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76>>,
        zh =>
        <<229, 188, 128, 229, 144, 175, 32, 83,
          83, 76>>},
      type => boolean},
    verify =>
    #{default => false,
      description =>
      #{en =>
      <<87, 104, 101, 116, 104, 101, 114, 32,
        116, 111, 32, 118, 101, 114, 105, 102,
        121, 32, 116, 104, 101, 32, 115, 101,
        114, 118, 101, 114, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 66, 121, 32, 100, 101, 102, 97,
        117, 108, 116, 44, 32, 116, 104, 101,
        32, 99, 108, 105, 101, 110, 116, 32,
        119, 105, 108, 108, 32, 110, 111, 116,
        32, 118, 101, 114, 105, 102, 121, 32,
        116, 104, 101, 32, 115, 101, 114, 118,
        101, 114, 39, 115, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 73, 102, 32, 118, 101, 114,
        105, 102, 105, 99, 97, 116, 105, 111,
        110, 32, 105, 115, 32, 114, 101, 113,
        117, 105, 114, 101, 100, 44, 32, 112,
        108, 101, 97, 115, 101, 32, 115, 101,
        116, 32, 105, 116, 32, 116, 111, 32,
        116, 114, 117, 101, 46>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166, 227, 128, 130, 32, 233,
          187, 152, 232, 174, 164, 229, 174, 162,
          230, 136, 183, 231, 171, 175, 228, 184,
          141, 228, 188, 154, 229, 142, 187, 230,
          160, 161, 233, 170, 140, 230, 156, 141,
          229, 138, 161, 229, 153, 168, 231, 154,
          132, 232, 175, 129, 228, 185, 166, 239,
          188, 140, 229, 166, 130, 230, 158, 156,
          233, 156, 128, 232, 166, 129, 230, 160,
          161, 233, 170, 140, 239, 188, 140, 232,
          175, 183, 232, 174, 190, 231, 189, 174,
          230, 136, 144, 116, 114, 117, 101, 227,
          128, 130>>},
      order => 15,
      title =>
      #{en =>
      <<86, 101, 114, 105, 102, 121, 32, 83,
        101, 114, 118, 101, 114, 32, 67, 101,
        114, 116, 102, 105, 108, 101>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166>>},
      type => boolean},
    w_mode =>
    #{default => <<115, 97, 102, 101>>,
      description =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      enum =>
      [<<115, 97, 102, 101>>,
        <<117, 110, 115, 97, 102, 101>>],
      order => 8,
      title =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      type => string}},
  status => on_get_resource_status,
  title =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 83, 104, 97,
    114, 100, 101, 100, 32, 77, 111, 100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 83, 104, 97,
      114, 100, 101, 100, 32, 230, 168, 161, 229, 188,
      143>>}}).

-resource_type(#{create => on_resource_create_for_rs,
  description =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 82, 101, 112,
    108, 105, 99, 97, 32, 83, 101, 116, 32, 77, 111,
    100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 82, 101, 108,
      105, 99, 97, 32, 83, 101, 116, 32, 230, 168, 161,
      229, 188, 143>>},
  destroy => on_resource_destroy,
  name => backend_mongo_rs,
  params =>
  #{auth_source =>
  #{default => <<109, 113, 116, 116>>,
    description =>
    #{en =>
    <<65, 117, 116, 104, 32, 115, 111, 117,
      114, 99, 101, 32, 102, 111, 114, 32,
      99, 111, 110, 110, 101, 99, 116, 105,
      110, 103, 32, 116, 111, 32, 77, 111,
      110, 103, 111, 68, 66>>,
      zh =>
      <<231, 148, 168, 230, 136, 183, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    order => 6,
    title =>
    #{en =>
    <<65, 117, 116, 104, 32, 83, 111, 117,
      114, 99, 101>>,
      zh =>
      <<232, 191, 158, 230, 142, 165, 232, 174,
        164, 232, 175, 129, 230, 186, 144>>},
    type => string},
    cacertfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 67, 65, 99, 101, 114, 116, 32, 102,
        105, 108, 101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 67, 65, 232, 175, 129, 228,
          185, 166>>},
      order => 12,
      title =>
      #{en => <<83, 83, 76, 32, 67, 65>>,
        zh => <<83, 83, 76, 32, 67, 65>>},
      type => file},
    certfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 99, 101, 114, 116, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 232, 175, 129, 228, 185,
          166>>},
      order => 14,
      title =>
      #{en => <<83, 83, 76, 32, 67, 101, 114, 116>>,
        zh => <<83, 83, 76, 32, 67, 101, 114, 116>>},
      type => file},
    connectTimoutMS =>
    #{default => 20000,
      description =>
      #{en =>
      <<84, 105, 109, 101, 111, 117, 116, 32,
        102, 111, 114, 32, 99, 111, 110, 110,
        101, 99, 116, 105, 110, 103, 32, 116,
        111, 32, 115, 101, 114, 118, 101,
        114>>,
        zh => <<222, 165, 133, 246, 246, 244>>},
      order => 7,
      title =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 32,
        84, 105, 109, 101, 111, 117, 116, 40,
        109, 115, 41>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 232, 182,
          133, 230, 151, 182, 230, 151, 182, 233,
          151, 180, 40, 230, 175, 171, 231, 167,
          146, 41>>},
      type => number},
    database =>
    #{default => <<109, 113, 116, 116>>,
      description =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        110, 97, 109, 101, 32, 102, 111, 114,
        32, 115, 97, 118, 105, 110, 103, 32,
        100, 97, 116, 97>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      order => 2, required => true,
      title =>
      #{en =>
      <<68, 97, 116, 97, 98, 97, 115, 101, 32,
        78, 97, 109, 101>>,
        zh =>
        <<230, 149, 176, 230, 141, 174, 229, 186,
          147, 229, 144, 141, 231, 167, 176>>},
      type => string},
    keyfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<89, 111, 117, 114, 32, 115, 115, 108,
        32, 107, 101, 121, 102, 105, 108,
        101>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32, 83,
          83, 76, 32, 231, 167, 129, 233, 146,
          165>>},
      order => 13,
      title =>
      #{en => <<83, 83, 76, 32, 75, 101, 121>>,
        zh => <<83, 83, 76, 32, 75, 101, 121>>},
      type => file},
    login =>
    #{default => <<>>,
      description =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      order => 4,
      title =>
      #{en =>
      <<85, 115, 101, 114, 110, 97, 109, 101>>,
        zh =>
        <<231, 148, 168, 230, 136, 183, 229, 144,
          141>>},
      type => string},
    password =>
    #{default => <<>>,
      description =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100,
        32, 102, 111, 114, 32, 99, 111, 110,
        110, 101, 99, 116, 105, 110, 103, 32,
        116, 111, 32, 77, 111, 110, 103, 111,
        68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          229, 175, 134, 231, 160, 129>>},
      order => 5,
      title =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100>>,
        zh => <<229, 175, 134, 231, 160, 129>>},
      type => password},
    pool_size =>
    #{default => 8,
      description =>
      #{en =>
      <<67, 111, 110, 110, 101, 99, 116, 105,
        111, 110, 32, 80, 111, 111, 108, 32,
        83, 105, 122, 101, 32, 102, 111, 114,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      order => 3, required => true,
      title =>
      #{en =>
      <<80, 111, 111, 108, 32, 83, 105, 122,
        101>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      type => number},
    r_mode =>
    #{default => <<109, 97, 115, 116, 101, 114>>,
      description =>
      #{en =>
      <<82, 101, 97, 100, 32, 77, 111, 100,
        101>>,
        zh =>
        <<232, 175, 187, 230, 168, 161, 229, 188,
          143>>},
      enum =>
      [<<109, 97, 115, 116, 101, 114>>,
        <<115, 108, 97, 118, 101, 95, 111, 107>>],
      order => 9,
      title =>
      #{en =>
      <<82, 101, 97, 100, 32, 77, 111, 100,
        101>>,
        zh =>
        <<232, 175, 187, 230, 168, 161, 229, 188,
          143>>},
      type => string},
    rs_set_name =>
    #{default => <<>>,
      description =>
      #{en =>
      <<83, 101, 116, 32, 110, 97, 109, 101,
        32, 111, 102, 32, 82, 101, 112, 108,
        105, 99, 97, 32, 83, 101, 116, 32, 116,
        121, 112, 101>>,
        zh =>
        <<83, 101, 116, 32, 110, 97, 109, 101,
          32, 111, 102, 32, 82, 101, 112, 108,
          105, 99, 97, 32, 83, 101, 116, 32, 116,
          121, 112, 101>>},
      order => 10, required => true,
      title =>
      #{en => <<83, 101, 116, 32, 78, 97, 109, 101>>,
        zh =>
        <<83, 101, 116, 32, 78, 97, 109, 101>>},
      type => string},
    servers =>
    #{default =>
    <<49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 50,
      55, 48, 49, 55>>,
      description =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114, 32, 65, 100,
        100, 114, 101, 115, 115, 44, 32, 77,
        117, 108, 116, 105, 112, 108, 101, 32,
        110, 111, 100, 101, 115, 32, 115, 101,
        112, 97, 114, 97, 116, 101, 100, 32,
        98, 121, 32, 99, 111, 109, 109, 97,
        115>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168, 229, 156, 176, 229, 157, 128, 44,
          32, 229, 164, 154, 232, 138, 130, 231,
          130, 185, 228, 189, 191, 231, 148, 168,
          233, 128, 151, 229, 143, 183, 229, 136,
          134, 233, 154, 148>>},
      order => 1, required => true,
      title =>
      #{en =>
      <<77, 111, 110, 103, 111, 68, 66, 32, 83,
        101, 114, 118, 101, 114>>,
        zh =>
        <<77, 111, 110, 103, 111, 68, 66, 32,
          230, 156, 141, 229, 138, 161, 229, 153,
          168>>},
      type => string},
    ssl =>
    #{default => false,
      description =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76, 32, 102, 111, 114, 32, 99, 111,
        110, 110, 101, 99, 116, 105, 110, 103,
        32, 77, 111, 110, 103, 111, 68, 66>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 229, 188,
          128, 229, 144, 175, 32, 83, 83, 76, 32,
          232, 191, 158, 230, 142, 165, 32, 77,
          111, 110, 103, 111, 68, 66>>},
      order => 11,
      title =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76>>,
        zh =>
        <<229, 188, 128, 229, 144, 175, 32, 83,
          83, 76>>},
      type => boolean},
    verify =>
    #{default => false,
      description =>
      #{en =>
      <<87, 104, 101, 116, 104, 101, 114, 32,
        116, 111, 32, 118, 101, 114, 105, 102,
        121, 32, 116, 104, 101, 32, 115, 101,
        114, 118, 101, 114, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 66, 121, 32, 100, 101, 102, 97,
        117, 108, 116, 44, 32, 116, 104, 101,
        32, 99, 108, 105, 101, 110, 116, 32,
        119, 105, 108, 108, 32, 110, 111, 116,
        32, 118, 101, 114, 105, 102, 121, 32,
        116, 104, 101, 32, 115, 101, 114, 118,
        101, 114, 39, 115, 32, 99, 101, 114,
        116, 105, 102, 105, 99, 97, 116, 101,
        46, 32, 73, 102, 32, 118, 101, 114,
        105, 102, 105, 99, 97, 116, 105, 111,
        110, 32, 105, 115, 32, 114, 101, 113,
        117, 105, 114, 101, 100, 44, 32, 112,
        108, 101, 97, 115, 101, 32, 115, 101,
        116, 32, 105, 116, 32, 116, 111, 32,
        116, 114, 117, 101, 46>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166, 227, 128, 130, 32, 233,
          187, 152, 232, 174, 164, 229, 174, 162,
          230, 136, 183, 231, 171, 175, 228, 184,
          141, 228, 188, 154, 229, 142, 187, 230,
          160, 161, 233, 170, 140, 230, 156, 141,
          229, 138, 161, 229, 153, 168, 231, 154,
          132, 232, 175, 129, 228, 185, 166, 239,
          188, 140, 229, 166, 130, 230, 158, 156,
          233, 156, 128, 232, 166, 129, 230, 160,
          161, 233, 170, 140, 239, 188, 140, 232,
          175, 183, 232, 174, 190, 231, 189, 174,
          230, 136, 144, 116, 114, 117, 101, 227,
          128, 130>>},
      order => 15,
      title =>
      #{en =>
      <<86, 101, 114, 105, 102, 121, 32, 83,
        101, 114, 118, 101, 114, 32, 67, 101,
        114, 116, 102, 105, 108, 101>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 230, 160,
          161, 233, 170, 140, 230, 156, 141, 229,
          138, 161, 229, 153, 168, 232, 175, 129,
          228, 185, 166>>},
      type => boolean},
    w_mode =>
    #{default => <<115, 97, 102, 101>>,
      description =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      enum =>
      [<<115, 97, 102, 101>>,
        <<117, 110, 115, 97, 102, 101>>],
      order => 8,
      title =>
      #{en =>
      <<87, 114, 105, 116, 101, 32, 77, 111,
        100, 101>>,
        zh =>
        <<229, 134, 153, 230, 168, 161, 229, 188,
          143>>},
      type => string}},
  status => on_get_resource_status,
  title =>
  #{en =>
  <<77, 111, 110, 103, 111, 68, 66, 32, 82, 101, 112,
    108, 105, 99, 97, 32, 83, 101, 116, 32, 77, 111,
    100, 101>>,
    zh =>
    <<77, 111, 110, 103, 111, 68, 66, 32, 82, 101, 108,
      105, 99, 97, 32, 83, 101, 116, 32, 230, 168, 161,
      229, 188, 143>>}}).

-rule_action(#{category => data_persist,
  create => on_action_create_data_to_mongo,
  description =>
  #{en =>
  <<83, 116, 111, 114, 101, 32, 68, 97, 116, 97, 32, 116,
    111, 32, 77, 111, 110, 103, 111, 68, 66>>,
    zh =>
    <<228, 191, 157, 229, 173, 152, 230, 149, 176, 230,
      141, 174, 229, 136, 176, 32, 77, 111, 110, 103, 111,
      68, 66>>},
  for => '$any', name => data_to_mongo,
  params =>
  #{'$resource' =>
  #{description =>
  #{en =>
  <<66, 105, 110, 100, 32, 97, 32, 114, 101,
    115, 111, 117, 114, 99, 101, 32, 116,
    111, 32, 116, 104, 105, 115, 32, 97, 99,
    116, 105, 111, 110>>,
    zh =>
    <<231, 187, 153, 229, 138, 168, 228, 189,
      156, 231, 187, 145, 229, 174, 154, 228,
      184, 128, 228, 184, 170, 232, 181, 132,
      230, 186, 144>>},
    required => true,
    title =>
    #{en =>
    <<82, 101, 115, 111, 117, 114, 99, 101, 32,
      73, 68>>,
      zh =>
      <<232, 181, 132, 230, 186, 144, 32, 73,
        68>>},
    type => string},
    collection =>
    #{description =>
    #{en =>
    <<84, 104, 101, 32, 99, 111, 108, 108, 101,
      99, 116, 105, 111, 110, 32, 110, 97, 109,
      101, 32, 102, 111, 114, 32, 115, 97, 118,
      105, 110, 103, 32, 100, 97, 116, 97>>,
      zh =>
      <<231, 148, 168, 228, 186, 142, 228, 191,
        157, 229, 173, 152, 230, 149, 176, 230,
        141, 174, 231, 154, 132, 32, 67, 111,
        108, 108, 101, 99, 116, 105, 111, 110,
        32, 229, 144, 141, 229, 173, 151>>},
      order => 1, required => true,
      title =>
      #{en =>
      <<67, 111, 108, 108, 101, 99, 116, 105,
        111, 110>>,
        zh =>
        <<67, 111, 108, 108, 101, 99, 116, 105,
          111, 110>>},
      type => string},
    payload_tmpl =>
    #{default => <<>>,
      description =>
      #{en =>
      <<84, 104, 101, 32, 112, 97, 121, 108, 111,
        97, 100, 32, 116, 101, 109, 112, 108, 97,
        116, 101, 44, 32, 118, 97, 114, 105, 97,
        98, 108, 101, 32, 105, 110, 116, 101,
        114, 112, 111, 108, 97, 116, 105, 111,
        110, 32, 105, 115, 32, 115, 117, 112,
        112, 111, 114, 116, 101, 100, 46, 32, 73,
        102, 32, 117, 115, 105, 110, 103, 32,
        101, 109, 112, 116, 121, 32, 116, 101,
        109, 112, 108, 97, 116, 101, 32, 40, 100,
        101, 102, 97, 117, 108, 116, 41, 44, 32,
        116, 104, 101, 110, 32, 116, 104, 101,
        32, 112, 97, 121, 108, 111, 97, 100, 32,
        119, 105, 108, 108, 32, 98, 101, 32, 97,
        108, 108, 32, 116, 104, 101, 32, 97, 118,
        97, 105, 108, 97, 98, 108, 101, 32, 118,
        97, 114, 115, 32, 105, 110, 32, 74, 83,
        79, 78, 32, 102, 111, 114, 109, 97,
        116>>,
        zh =>
        <<230, 182, 136, 230, 129, 175, 229, 134,
          133, 229, 174, 185, 230, 168, 161, 230,
          157, 191, 239, 188, 140, 230, 148, 175,
          230, 140, 129, 229, 143, 152, 233, 135,
          143, 227, 128, 130, 232, 139, 165, 228,
          189, 191, 231, 148, 168, 231, 169, 186,
          230, 168, 161, 230, 157, 191, 239, 188,
          136, 233, 187, 152, 232, 174, 164, 239,
          188, 137, 239, 188, 140, 230, 182, 136,
          230, 129, 175, 229, 134, 133, 229, 174,
          185, 228, 184, 186, 32, 74, 83, 79, 78,
          32, 230, 160, 188, 229, 188, 143, 231,
          154, 132, 230, 137, 128, 230, 156, 137,
          229, 173, 151, 230, 174, 181>>},
      input => textarea, order => 2, required => false,
      title =>
      #{en =>
      <<80, 97, 121, 108, 111, 97, 100, 32, 84,
        101, 109, 112, 108, 97, 116, 101>>,
        zh =>
        <<230, 182, 136, 230, 129, 175, 229, 134,
          133, 229, 174, 185, 230, 168, 161, 230,
          157, 191>>},
      type => string}},
  title =>
  #{en =>
  <<68, 97, 116, 97, 32, 116, 111, 32, 77, 111, 110, 103,
    111, 68, 66>>,
    zh =>
    <<228, 191, 157, 229, 173, 152, 230, 149, 176, 230,
      141, 174, 229, 136, 176, 32, 77, 111, 110, 103, 111,
      68, 66>>},
  types =>
  [backend_mongo_single,
    backend_mongo_sharded,
    backend_mongo_rs]}).

-rule_action(#{category => offline_msgs,
  create => on_action_create_offline_msg,
  description =>
  #{en =>
  <<79, 102, 102, 108, 105, 110, 101, 32, 77, 115, 103,
    32, 116, 111, 32, 77, 111, 110, 103, 111, 68, 66>>,
    zh =>
    <<231, 166, 187, 231, 186, 191, 230, 182, 136, 230,
      129, 175, 228, 191, 157, 229, 173, 152, 229, 136,
      176, 32, 77, 111, 110, 103, 111, 68, 66>>},
  for => '$any', name => offline_msg_to_mongo,
  params =>
  #{'$resource' =>
  #{description =>
  #{en =>
  <<66, 105, 110, 100, 32, 97, 32, 114, 101,
    115, 111, 117, 114, 99, 101, 32, 116,
    111, 32, 116, 104, 105, 115, 32, 97, 99,
    116, 105, 111, 110>>,
    zh =>
    <<231, 187, 153, 229, 138, 168, 228, 189,
      156, 231, 187, 145, 229, 174, 154, 228,
      184, 128, 228, 184, 170, 232, 181, 132,
      230, 186, 144>>},
    required => true,
    title =>
    #{en =>
    <<82, 101, 115, 111, 117, 114, 99, 101, 32,
      73, 68>>,
      zh =>
      <<232, 181, 132, 230, 186, 144, 32, 73,
        68>>},
    type => string},
    max_returned_count =>
    #{default => 0,
      description =>
      #{en =>
      <<77, 97, 120, 32, 110, 117, 109, 98, 101,
        114, 32, 111, 102, 32, 102, 101, 116, 99,
        104, 32, 111, 102, 102, 108, 105, 110,
        101, 32, 109, 101, 115, 115, 97, 103,
        101, 115>>,
        zh =>
        <<232, 142, 183, 229, 143, 150, 231, 166,
          187, 231, 186, 191, 230, 182, 136, 230,
          129, 175, 231, 154, 132, 230, 156, 128,
          229, 164, 167, 230, 157, 161, 230, 149,
          176>>},
      required => false,
      title =>
      #{en =>
      <<77, 97, 120, 32, 82, 101, 116, 117, 114,
        110, 101, 100, 32, 67, 111, 117, 110,
        116>>,
        zh =>
        <<77, 97, 120, 32, 82, 101, 116, 117, 114,
          110, 101, 100, 32, 67, 111, 117, 110,
          116>>},
      type => number},
    time_range =>
    #{default => <<>>,
      description =>
      #{en =>
      <<84, 105, 109, 101, 32, 82, 97, 110, 103,
        101, 32, 111, 102, 32, 102, 101, 116, 99,
        104, 32, 111, 102, 102, 108, 105, 110,
        101, 32, 109, 101, 115, 115, 97, 103,
        101, 115>>,
        zh =>
        <<232, 142, 183, 229, 143, 150, 230, 156,
          128, 232, 191, 145, 230, 151, 182, 233,
          151, 180, 232, 140, 131, 229, 155, 180,
          229, 134, 133, 231, 154, 132, 231, 166,
          187, 231, 186, 191, 230, 182, 136, 230,
          129, 175>>},
      required => false,
      title =>
      #{en =>
      <<84, 105, 109, 101, 32, 82, 97, 110, 103,
        101>>,
        zh =>
        <<84, 105, 109, 101, 32, 82, 97, 110, 103,
          101>>},
      type => string}},
  title =>
  #{en =>
  <<79, 102, 102, 108, 105, 110, 101, 32, 77, 115, 103,
    32, 116, 111, 32, 77, 111, 110, 103, 111, 68, 66>>,
    zh =>
    <<231, 166, 187, 231, 186, 191, 230, 182, 136, 230,
      129, 175, 228, 191, 157, 229, 173, 152, 229, 136,
      176, 32, 77, 111, 110, 103, 111, 68, 66>>},
  types =>
  [backend_mongo_single,
    backend_mongo_sharded,
    backend_mongo_rs]}).

-rule_action(#{category => server_side_subscription,
  create => on_action_create_lookup_sub,
  description =>
  #{en =>
  <<71, 101, 116, 32, 83, 117, 98, 115, 99, 114, 105,
    112, 116, 105, 111, 110, 32, 76, 105, 115, 116, 32,
    70, 114, 111, 109, 32, 77, 111, 110, 103, 111, 68,
    66>>,
    zh =>
    <<228, 187, 142, 32, 77, 111, 110, 103, 111, 68, 66,
      32, 228, 184, 173, 232, 142, 183, 229, 143, 150, 232,
      174, 162, 233, 152, 133, 229, 136, 151, 232, 161,
      168>>},
  for => '$any', name => lookup_sub_to_mongo,
  params =>
  #{'$resource' =>
  #{description =>
  #{en =>
  <<66, 105, 110, 100, 32, 97, 32, 114, 101,
    115, 111, 117, 114, 99, 101, 32, 116,
    111, 32, 116, 104, 105, 115, 32, 97, 99,
    116, 105, 111, 110>>,
    zh =>
    <<231, 187, 153, 229, 138, 168, 228, 189,
      156, 231, 187, 145, 229, 174, 154, 228,
      184, 128, 228, 184, 170, 232, 181, 132,
      230, 186, 144>>},
    required => true,
    title =>
    #{en =>
    <<82, 101, 115, 111, 117, 114, 99, 101, 32,
      73, 68>>,
      zh =>
      <<232, 181, 132, 230, 186, 144, 32, 73,
        68>>},
    type => string}},
  title =>
  #{en =>
  <<83, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111,
    110, 32, 76, 105, 115, 116, 32, 70, 114, 111, 109,
    32, 77, 111, 110, 103, 111, 68, 66>>,
    zh =>
    <<228, 187, 142, 32, 77, 111, 110, 103, 111, 68, 66,
      32, 228, 184, 173, 232, 142, 183, 229, 143, 150, 232,
      174, 162, 233, 152, 133, 229, 136, 151, 232, 161,
      168>>},
  types =>
  [backend_mongo_single,
    backend_mongo_sharded,
    backend_mongo_rs]}).

-vsn("4.2.5").

on_resource_create_for_single(ResId, Config) ->
  create_resource_by_type(ResId,
    Config,
    backend_mongo_single).

on_resource_create_for_sharded(ResId, Config) ->
  create_resource_by_type(ResId,
    Config,
    backend_mongo_sharded).

on_resource_create_for_rs(ResId,
    Config = #{<<"rs_set_name">> := _Name}) ->
  create_resource_by_type(ResId,
    Config,
    backend_mongo_rs).

create_resource_by_type(ResId,
    Config = #{<<"servers">> := Servers,
      <<"pool_size">> := PoolSize,
      <<"database">> := Database},
    Type) ->
  begin
    logger:log(info,
      #{},
      #{report_cb =>
      fun (_) ->
        {logger_header() ++
          "Initiating Resource ~p, ResId: ~p",
          [Type, ResId]}
      end,
        mfa =>
        {emqx_backend_mongo_actions,
          create_resource_by_type,
          3},
        line => 336})
  end,
  {ok, _} = application:ensure_all_started(ecpool),
  {ok, _} = application:ensure_all_started(mongodb),
  Hosts = [string:trim(H)
    || H <- string:tokens(binary_to_list(Servers), ",")],
  SslOpts = init_ssl_opts(Config, ResId),
  Opts = [{type, init_type(Type, Config)},
    {hosts, Hosts},
    {pool_size, PoolSize},
    {options, init_options(maps:to_list(Config), [])},
    {worker_options,
      init_worker_options(maps:to_list(Config), SslOpts)}],
  TestOpts = [{database, Database}] ++
    host_port(hd(Hosts)),
  {ok, TestConn} = mc_worker_api:connect(TestOpts),
  PoolName = pool_name(ResId),
  start_resource(ResId, PoolName, Opts, Type),
  #{pool => PoolName, type => Type, test_conn => TestConn,
    test_opts => TestOpts}.

start_resource(ResId, PoolName, Options, Type) ->
  case ecpool:start_sup_pool(PoolName,
    emqx_backend_mongo_actions,
    Options)
  of
    {ok, _} ->
      begin
        logger:log(info,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Initiated Resource ~p Successfully, "
              "ResId: ~p",
              [Type, ResId]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              start_resource,
              4},
            line => 359})
      end;
    {error, {already_started, _Pid}} ->
      on_resource_destroy(ResId,
        #{pool => PoolName, type => Type}),
      start_resource(ResId, PoolName, Options, Type);
    {error, Reason} ->
      begin
        logger:log(error,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Initiate Resource ~p failed, ResId: "
              "~p, ~0p",
              [Type, ResId, Reason]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              start_resource,
              4},
            line => 364})
      end,
      error({{Type, ResId}, create_failed})
  end.

-spec on_get_resource_status(ResId :: binary(),
    Params :: map()) -> Status :: map().

on_get_resource_status(_ResId,
    #{test_opts := TestOpts}) ->
  case mc_worker_api:connect(TestOpts) of
    {ok, TestConn} ->
      mc_worker_api:disconnect(TestConn),
      #{is_alive => true};
    {error, _} -> #{is_alive => false}
  end.

on_resource_destroy(ResId,
    Params = #{pool := PoolName, type := Type}) ->
  begin
    logger:log(info,
      #{},
      #{report_cb =>
      fun (_) ->
        {logger_header() ++
          "Destroying Resource ~p, ResId: ~p",
          [Type, ResId]}
      end,
        mfa =>
        {emqx_backend_mongo_actions, on_resource_destroy, 2},
        line => 379})
  end,
  case maps:find(test_conn, Params) of
    {ok, TestConn} -> mc_worker_api:disconnect(TestConn);
    error -> ok
  end,
  case ecpool:stop_sup_pool(PoolName) of
    ok ->
      begin
        logger:log(info,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Destroyed Resource ~p Successfully, "
              "ResId: ~p",
              [Type, ResId]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              on_resource_destroy,
              2},
            line => 386})
      end;
    {error, Reason} ->
      begin
        logger:log(error,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Destroy Resource ~p failed, ResId: ~p, ~p",
              [Type, ResId, Reason]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              on_resource_destroy,
              2},
            line => 388})
      end,
      error({{Type, ResId}, destroy_failed})
  end.

on_action_create_data_to_mongo(ActId,
    Opts = #{pool := PoolName,
      <<"collection">> := Collection,
      <<"payload_tmpl">> := PayloadTmpl}) ->
  begin
    logger:log(info,
      #{},
      #{report_cb =>
      fun (_) ->
        {logger_header() ++
          "Initiating Action ~p, collection: ~p, "
          "selector: ~p",
          [on_action_create_data_to_mongo,
            Collection,
            PayloadTmpl]}
      end,
        mfa =>
        {emqx_backend_mongo_actions,
          on_action_create_data_to_mongo,
          2},
        line => 393})
  end,
  PayloadTks = emqx_rule_utils:preproc_tmpl(PayloadTmpl),
  {[{'Opts', Opts},
    {'PoolName', PoolName},
    {'PayloadTmpl', PayloadTmpl},
    {'Collection', Collection},
    {'ActId', ActId},
    {'PayloadTks', PayloadTks}],
    Opts}.

on_action_data_to_mongo(Msg,
    _Envs = #{'__bindings__' :=
    #{'ActId' := ActId,
      'PoolName' := PoolName,
      'Collection' := Collection,
      'PayloadTks' := PayloadTks}}) ->
  save_data_to_mongo(PoolName,
    ActId,
    Collection,
    format_data(PayloadTks, Msg)).

on_action_create_offline_msg(ActId,
    Opts = #{pool := PoolName,
      <<"time_range">> := TimeRange0,
      <<"max_returned_count">> :=
      MaxReturnedCount}) ->
  TimeRange = case to_undefined(TimeRange0) of
                undefined -> undefined;
                TimeRange0 ->
                  cuttlefish_duration:parse(binary_to_list(TimeRange0), s)
              end,
  {[{'TimeRange0', TimeRange0},
    {'Opts', Opts},
    {'MaxReturnedCount', MaxReturnedCount},
    {'PoolName', PoolName},
    {'ActId', ActId},
    {'TimeRange', TimeRange}],
    Opts}.

on_action_offline_msg_to_mongo(Msg = #{event := Event,
  topic := Topic},
    _Envs = #{'__bindings__' :=
    #{'ActId' := ActId,
      'PoolName' := PoolName,
      'TimeRange' := TimeRange,
      'MaxReturnedCount' :=
      MaxReturnedCount}}) ->
  case Event of
    'message.acked' ->
      delete_message(Topic, Msg, PoolName, ActId);
    'message.publish' ->
      insert_message(Topic, Msg, PoolName, ActId);
    'session.subscribed' ->
      case lookup_message(Topic,
        PoolName,
        ActId,
        TimeRange,
        to_undefined(MaxReturnedCount))
      of
        {error, Reason} -> {badact, Reason};
        Messages ->
          [self() ! {deliver, Topic, M} || M <- Messages]
      end
  end.

on_action_create_lookup_sub(ActId,
    Opts = #{pool := PoolName}) ->
  {[{'Opts', Opts},
    {'PoolName', PoolName},
    {'ActId', ActId}],
    Opts}.

on_action_lookup_sub_to_mongo(Msg = #{event := Event,
  clientid := ClientId},
    Envs) ->
  ActId = maps:get('ActId',
    maps:get('__bindings__', Envs, #{})),
  PoolName = maps:get('PoolName',
    maps:get('__bindings__', Envs, #{})),
  case Event of
    'client.connected' ->
      case lookup_subscribe(PoolName, ActId, ClientId) of
        {error, Reason} -> {badact, Reason};
        TopicTables -> self() ! {subscribe, TopicTables}
      end;
    'session.subscribed' ->
      #{topic := Topic, qos := QoS} = Msg,
      insert_subscribe(PoolName, ActId, ClientId, Topic, QoS)
  end.

lookup_subscribe(Pool, ActId, ClientId) ->
  case emqx_backend_mongo_cli:mongo_query(Pool,
    <<"mqtt_sub">>,
    [<<"clientid">>, ClientId])
  of
    {ok, Rows} ->
      emqx_rule_metrics:inc_actions_success(ActId),
      [{maps:get(<<"topic">>, Map),
        #{qos => trunc(maps:get(<<"qos">>, Map, 0))}}
        || Map <- Rows];
    {error, Error} ->
      begin
        logger:log(error,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Lookup subscription error: ~p",
              [Error]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              lookup_subscribe,
              3},
            line => 458})
      end,
      emqx_rule_metrics:inc_actions_error(ActId),
      {errro, Error}
  end.

insert_subscribe(Pool, ActId, ClientId, Topic, QoS) ->
  Selector = [<<"clientid">>,
    ClientId,
    <<"topic">>,
    Topic],
  Docs = [<<"clientid">>,
    ClientId,
    <<"topic">>,
    Topic,
    <<"qos">>,
    QoS],
  case emqx_backend_mongo_cli:mongo_insert_update(Pool,
    <<"mqtt_sub">>,
    Selector,
    Docs)
  of
    true -> emqx_rule_metrics:inc_actions_success(ActId);
    _ ->
      emqx_rule_metrics:inc_actions_error(ActId),
      {badact, insert_failure}
  end.

delete_message(Topic, #{id := MsgId}, Pool, ActId) ->
  Selector = [<<"topic">>, Topic, <<"msgid">>, MsgId],
  case emqx_backend_mongo_cli:mongo_delete(Pool,
    <<"mqtt_msg">>,
    Selector)
  of
    true -> emqx_rule_metrics:inc_actions_success(ActId);
    _ ->
      emqx_rule_metrics:inc_actions_error(ActId),
      {badact, delete_failure}
  end.

insert_message(Topic, Msg, Pool, ActId) ->
  #{id := MsgId, qos := Qos, flags := Flags,
    payload := Payload, publish_received_at := Ts,
    clientid := From} =
    Msg,
  Retain = maps:get(retain, Flags, true),
  Selector = [<<"topic">>,
    Topic,
    <<"msgid">>,
    MsgId,
    <<"sender">>,
    From,
    <<"qos">>,
    Qos,
    <<"retain">>,
    i(Retain),
    <<"payload">>,
    Payload,
    <<"timestamp">>,
    Ts],
  case emqx_backend_mongo_cli:mongo_insert(Pool,
    <<"mqtt_msg">>,
    Selector)
  of
    true -> emqx_rule_metrics:inc_actions_success(ActId);
    _ ->
      emqx_rule_metrics:inc_actions_error(ActId),
      {badact, insert_failure}
  end.

lookup_message(Topic, Pool, ActId, undefined,
    undefined) ->
  lookup_message(Pool,
    ActId,
    fun (C) ->
      mongo_api:find(C,
        <<"mqtt_msg">>,
        {<<"topic">>, Topic},
        #{})
    end,
    rest);
lookup_message(Topic, Pool, ActId, TimeRange,
    undefined) ->
  Time = erlang:system_time(seconds) - TimeRange,
  Selector = {<<"topic">>,
    Topic,
    <<"arrived">>,
    {<<"$gte">>, Time}},
  lookup_message(Pool,
    ActId,
    fun (C) ->
      mongo_api:find(C, <<"mqtt_msg">>, Selector, #{})
    end,
    rest);
lookup_message(Topic, Pool, ActId, undefined,
    MaxReturnedCount) ->
  Selector = {<<"topic">>,
    Topic,
    <<"$orderby">>,
    #{<<"id">> => -1}},
  lookup_message(Pool,
    ActId,
    fun (C) ->
      mongo_api:find(C,
        <<"mqtt_msg">>,
        Selector,
        #{},
        0,
        MaxReturnedCount)
    end,
    next_batch);
lookup_message(Topic, Pool, ActId, TimeRange,
    MaxReturnedCount) ->
  Time = erlang:system_time(seconds) - TimeRange,
  Selector = {<<"topic">>,
    Topic,
    <<"arrived">>,
    {<<"$gte">>, Time},
    <<"$orderby">>,
    #{<<"id">> => -1}},
  lookup_message(Pool,
    ActId,
    fun (C) ->
      mongo_api:find(C,
        <<"mqtt_msg">>,
        Selector,
        #{},
        0,
        MaxReturnedCount)
    end,
    next_batch).

lookup_message(Pool, ActId, Fun, Function) ->
  case ecpool:with_client(Pool, Fun) of
    [] ->
      emqx_rule_metrics:inc_actions_success(ActId),
      [];
    {error, Error} ->
      emqx_rule_metrics:inc_actions_error(ActId),
      logger:error("Lookup message error: ~p", [Error]),
      {error, Error};
    {ok, Cursor} when is_pid(Cursor) ->
      emqx_rule_metrics:inc_actions_success(ActId),
      Rows = mc_cursor:Function(Cursor),
      mc_cursor:close(Cursor),
      [begin
         Payload =
           emqx_backend_mongo_cli:maps_to_binary(maps:get(<<"payload">>,
             Row)),
         M = maps:to_list(maps:update(<<"payload">>,
           Payload,
           Row)),
         M1 = emqx_backend_mongo_cli:record_to_msg(M),
         M1#message{id = emqx_guid:from_hexstr(M1#message.id)}
       end
        || Row <- lists:reverse(Rows)]
  end.

format_data([], Msg) -> Msg;
format_data(PayloadTks, Msg) ->
  emqx_json:decode(emqx_rule_utils:proc_tmpl(PayloadTks,
    Msg),
    [return_maps]).

connect(Opts) ->
  Type = proplists:get_value(type, Opts, single),
  Hosts = proplists:get_value(hosts, Opts, []),
  Options = proplists:get_value(options, Opts, []),
  WorkerOptions = proplists:get_value(worker_options,
    Opts,
    []),
  mongo_api:connect(Type, Hosts, Options, WorkerOptions).

init_type(backend_mongo_single, _Config) -> single;
init_type(backend_mongo_sharded, _Config) -> sharded;
init_type(backend_mongo_rs,
    #{<<"rs_set_name">> := Name}) ->
  {rs, Name}.

init_options([{_key, <<"">>} | R], Acc) ->
  init_options(R, Acc);
init_options([{<<"connectTimeoutMS">>, V} | R], Acc) ->
  init_options(R, [{connectTimeoutMS, V} | Acc]);
init_options([_ | R], Acc) -> init_options(R, Acc);
init_options([], Acc) ->
  [{pool_size, 1},
    {max_overflow, 0},
    {overflow_ttl, 1000},
    {overflow_check_period, 1000},
    {localThresholdMS, 1000},
    {socketTimeoutMS, 100},
    {serverSelectionTimeoutMS, 3000},
    {waitQueueTimeoutMS, 1000},
    {heartbeatFrequencyMS, 10000},
    {minHeartbeatFrequencyMS, 1000}
    | Acc].

init_worker_options([{_, <<"">>} | R], Acc) ->
  init_worker_options(R, Acc);
init_worker_options([{<<"database">>, V} | R], Acc) ->
  init_worker_options(R, [{database, V} | Acc]);
init_worker_options([{<<"auth_source">>, V} | R],
    Acc) ->
  init_worker_options(R, [{auth_source, V} | Acc]);
init_worker_options([{<<"login">>, V} | R], Acc) ->
  init_worker_options(R, [{login, V} | Acc]);
init_worker_options([{<<"password">>, V} | R], Acc) ->
  init_worker_options(R, [{password, V} | Acc]);
init_worker_options([{<<"w_mode">>, V} | R], Acc) ->
  init_worker_options(R, [{w_mode, V} | Acc]);
init_worker_options([{<<"r_mode">>, V} | R], Acc) ->
  init_worker_options(R, [{r_mode, V} | Acc]);
init_worker_options([_ | R], Acc) ->
  init_worker_options(R, Acc);
init_worker_options([], Acc) -> Acc.

init_ssl_opts(Config = #{ssl := true}, ResId) ->
  [{ssl, true},
    emqx_ruls_actions_utils:get_ssl_opts(Config, ResId)];
init_ssl_opts(_, _) -> [{ssl, false}].

save_data_to_mongo(PoolName, ActId, Collection,
    Selector) ->
  begin
    logger:log(debug,
      #{},
      #{report_cb =>
      fun (_) ->
        {logger_header() ++
          "Save data to mongo, pool: ~p, collection: "
          "~p, params: ~p",
          [PoolName, Collection, Selector]}
      end,
        mfa =>
        {emqx_backend_mongo_actions, save_data_to_mongo, 4},
        line => 609})
  end,
  case ecpool:with_client(PoolName,
    fun (C) -> mongo_api:insert(C, Collection, Selector)
    end)
  of
    {{true, Map}, _} ->
      case maps:get(<<"n">>, Map) > 0 of
        true ->
          emqx_rule_metrics:inc_actions_success(ActId),
          true;
        false ->
          begin
            logger:log(error,
              #{},
              #{report_cb =>
              fun (_) ->
                {logger_header() ++
                  "Did not insert data: ~p",
                  [Map]}
              end,
                mfa =>
                {emqx_backend_mongo_actions,
                  save_data_to_mongo,
                  4},
                line => 617})
          end,
          emqx_rule_metrics:inc_actions_error(ActId),
          {badact, insert_failure}
      end;
    {{false, Map}, _} ->
      begin
        logger:log(error,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Failed to store message: ~p",
              [Map]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              save_data_to_mongo,
              4},
            line => 622})
      end,
      emqx_rule_metrics:inc_actions_error(ActId),
      {badact, insert_failure};
    {error, Reason} ->
      begin
        logger:log(error,
          #{},
          #{report_cb =>
          fun (_) ->
            {logger_header() ++
              "Pick ecpool worker error ~p",
              [Reason]}
          end,
            mfa =>
            {emqx_backend_mongo_actions,
              save_data_to_mongo,
              4},
            line => 626})
      end,
      emqx_rule_metrics:inc_actions_error(ActId),
      {badact, Reason}
  end.

pool_name(ResId) ->
  list_to_atom("backend_mongo:" ++ str(ResId)).

str(List) when is_list(List) -> List;
str(Bin) when is_binary(Bin) -> binary_to_list(Bin);
str(Atom) when is_atom(Atom) -> atom_to_list(Atom).

i(true) -> 1;
i(false) -> 0.

to_undefined(<<>>) -> undefined;
to_undefined(0) -> undefined;
to_undefined(V) -> V.

host_port(HostPort) ->
  case string:split(HostPort, ":") of
    [Host, Port] ->
      {ok, Host1} = inet:parse_address(Host),
      [{host, Host1}, {port, list_to_integer(Port)}];
    [Host] ->
      {ok, Host1} = inet:parse_address(Host),
      [{host, Host1}]
  end.

logger_header() -> "".
